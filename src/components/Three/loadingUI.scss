$loadingUi__animationDuration: 3s; // 何秒おきにアニメーションをループするか
$loadingUi__glitchDuration: 1%; // グリッチ (RGB ずらし) 自体の長さ、上記秒数に対するパーセンテージ
$loadingUi__glitchFrequency: 100; // 動きの頻度
$loadingUi__glitchInterval: 30%;

@function loadingUi__Rand($min, $max) {
  @return random() * ($max - $min) + $min;
}

@mixin loadingUi__rgbShift($name) {
  @keyframes rgb-shift-#{$name} {
    @for $i from 0 to $loadingUi__glitchFrequency {
      #{$i * $loadingUi__glitchInterval} {
        transform: translate(
                        #{loadingUi__Rand(-2, 2) * 1%}, // 左右にどれぐらい動くか (横幅の±2%)
                        #{loadingUi__Rand(-0.5, 0.5) * 1%} // 上下にどれぐらい動くか (縦幅の±0.5%)
        );
      }
    }

    #{$loadingUi__glitchDuration}, 100% {
      transform: none;
    }
  }

  animation: rgb-shift-#{$name} $loadingUi__animationDuration steps(1, jump-end) infinite alternate both;
}

@mixin loadingUi__glitch($name) {
  @keyframes glitch-#{$name} {
    @for $i from 0 to $loadingUi__glitchFrequency {
      $left: 0%;
      $right: 100%;
      $top: loadingUi__Rand(0, 90) * 1%; // 切り取る位置 (縦軸0%〜90%内でランダムに動かす)
      $bottom: $top + loadingUi__Rand(1, 10) * 1%; // 切り取るサイズ (画像縦幅1%〜10%)

      #{$i * $loadingUi__glitchInterval} {
        clip-path: polygon(
                        $left $top,
                        $right $top,
                        $right $bottom,
                        $left $bottom
        );
        transform: translate(
                        #{loadingUi__Rand(-8, 8) * 1%}, // 左右にどれぐらい動くか (横幅の±8%)
                        #{loadingUi__Rand(-0.5, 0.5) * 1%} // 上下にどれぐらい動くか (縦幅の±0.5%)
        );
      }
    }

    #{$loadingUi__glitchDuration}, 100% {
      clip-path: none;
      transform: none;
    }
  }

  animation: glitch-#{$name} $loadingUi__animationDuration linear infinite alternate both;
}

.loadingUi {
  position: relative;
  width: 100dvw;
  height: 100dvh;
  display: flex;
  justify-content: center;
  align-content: center;
  flex-wrap: wrap;

  &__container {
    width: 500px;
    overflow: hidden;
    height: 500px;
    border-radius: 100%;
    position: relative;
  }

  &__glitchedimage {
    overflow: hidden;
    position: relative;
    width: 500px;
    height: 500px;
    border-radius: 100%;
    background-image: url('./assets/loading.png');
    background-size: cover;

    &::before, &::after {
      background: inherit; // コンテナ要素の背景を継承
      background-size: cover;
      bottom: 0;
      left: 0;
      position: absolute;
      right: 0;
      top: 0;
    }

    &::before {
      content:"";
      @include loadingUi__glitch(before);
    }

    &::after {
      content:"";
      @include loadingUi__glitch(after);
    }
  }

  &__channel {
    background: inherit; // コンテナ要素の背景を継承
    background-size: cover;
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    mix-blend-mode: screen;

    &::before {
      bottom: 0;
      content: "";
      display: block;
      left: 0;
      mix-blend-mode: multiply;
      position: absolute;
      right: 0;
      top: 0;
    }

    &.r {
      @include loadingUi__rgbShift(r);
      &::before {
        background: #f00;
      }
    }
    &.g {
      @include loadingUi__rgbShift(g);
      &::before {
        background: #0f0;
      }
    }
    &.b {
      @include loadingUi__rgbShift(b);
      &::before {
        background: #00f;
      }
    }
  }

  &__loadTextWrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 500px;
    height: 500px;
    display: flex;
    justify-content: center;
    align-items: center;
    &--content {
      color: white;
      background: rgba(0, 0, 0, 0.75);
      padding: 10px;
      border-radius: 5px;
    }
  }
}